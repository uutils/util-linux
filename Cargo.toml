# util-linux (uutils)
# * see the repository LICENSE, README, and CONTRIBUTING files for more information

# spell-checker:ignore (libs) bigdecimal datetime fundu gethostid kqueue libselinux mangen memmap procfs uuhelp

[package]
name = "util-linux"
version = "0.0.1"
authors = ["uutils developers"]
license = "MIT"
description = "util-linux ~ GNU util-linux (updated); implemented as universal (cross-platform) utils, written in Rust"
default-run = "util-linux"

homepage = "https://github.com/uutils/util-linux"
repository = "https://github.com/uutils/util-linux"
readme = "README.md"
keywords = ["util-linux", "uutils", "cross-platform", "cli", "utility"]
categories = ["command-line-utilities"]
rust-version = "1.70.0"
edition = "2021"

build = "build.rs"

[features]
default = ["feat_common_core"]
uudoc = []

feat_common_core = [
  "blockdev",
  "ctrlaltdel",
  "dmesg",
  "fsfreeze",
  "last",
  "lscpu",
  "lslocks",
  "lsmem",
  "mountpoint",
  "rev",
  "setsid",
]

[workspace.dependencies]
clap = { version = "4.4", features = ["wrap_help", "cargo"] }
clap_complete = "4.4"
clap_mangen = "0.2"
dns-lookup = "2.0.4"
libc = "0.2.152"
linux-raw-sys = { version = "0.9.0", features = ["ioctl"] }
nix = { version = "0.29", default-features = false }
phf = "0.11.2"
phf_codegen = "0.11.2"
rand = { version = "0.9.0", features = ["small_rng"] }
regex = "1.10.2"
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0.122", features = ["preserve_order"] }
sysinfo = "0.33"
tempfile = "3.9.0"
textwrap = { version = "0.16.0", features = ["terminal_size"] }
uucore = "0.0.30"
xattr = "1.3.1"

[dependencies]
clap = { workspace = true }
clap_complete = { workspace = true }
clap_mangen = { workspace = true }
dns-lookup = { workspace = true }
phf = { workspace = true }
serde = { workspace = true }
serde_json  = { workspace = true }
textwrap = { workspace = true }
uucore = { workspace = true }

#
blockdev = { optional = true, version = "0.0.1", package = "uu_blockdev", path = "src/uu/blockdev" }
ctrlaltdel = { optional = true, version = "0.0.1", package = "uu_ctrlaltdel", path = "src/uu/ctrlaltdel" }
dmesg = { optional = true, version = "0.0.1", package = "uu_dmesg", path = "src/uu/dmesg" }
fsfreeze = { optional = true, version = "0.0.1", package = "uu_fsfreeze", path = "src/uu/fsfreeze" }
last = { optional = true, version = "0.0.1", package = "uu_last", path = "src/uu/last" }
lscpu = { optional = true, version = "0.0.1", package = "uu_lscpu", path = "src/uu/lscpu" }
lslocks = { optional = true, version = "0.0.1", package = "uu_lslocks", path = "src/uu/lslocks" }
lsmem = { optional = true, version = "0.0.1", package = "uu_lsmem", path = "src/uu/lsmem" }
mountpoint = { optional = true, version = "0.0.1", package = "uu_mountpoint", path = "src/uu/mountpoint" }
rev = { optional = true, version = "0.0.1", package = "uu_rev", path = "src/uu/rev" }
setsid = { optional = true, version = "0.0.1", package = "uu_setsid", path ="src/uu/setsid" }

[dev-dependencies]
# dmesg test require fixed-boot-time feature turned on.
dmesg = { version = "0.0.1", package = "uu_dmesg", path = "src/uu/dmesg", features = ["fixed-boot-time"] }
libc = { workspace = true }
pretty_assertions = "1"
rand = { workspace = true }
regex = { workspace = true }
tempfile = { workspace = true }
uucore = { workspace = true, features = ["entries", "process", "signals"] }

[target.'cfg(unix)'.dev-dependencies]
nix = { workspace = true, features = ["term"] }
xattr = { workspace = true }

[target.'cfg(any(target_os = "linux", target_os = "android"))'.dev-dependencies]
procfs = { version = "0.17", default-features = false }
rlimit = "0.10.1"

[build-dependencies]
phf_codegen = { workspace = true }


[[bin]]
name = "util-linux"
path = "src/bin/util-linux.rs"

[[bin]]
name = "uudoc"
path = "src/bin/uudoc.rs"
required-features = ["uudoc"]

# The default release profile. It contains all optimizations, without
# sacrificing debug info. With this profile (like in the standard
# release profile), the debug info and the stack traces will still be available.
[profile.release]
lto = true

# A release-like profile that is tuned to be fast, even when being fast
# compromises on binary size. This includes aborting on panic.
[profile.release-fast]
inherits = "release"
panic = "abort"

# A release-like profile that is as small as possible.
[profile.release-small]
inherits = "release"
opt-level = "z"
panic = "abort"
strip = true
